{"version":3,"file":"debug-composer.js","sources":["../src/logger.js","../src/debugTools.js","../src/index.js"],"sourcesContent":["import debug from 'debug';\n\nconst createLogger = (namespace, addToGlobals = false) => {\n  const debugInstances = {};\n  const logger = new Proxy(() => {}, {\n    get(target, name) {\n      if (!debugInstances[`${namespace}:${name}`]) {\n        debugInstances[`${namespace}:${name}`] = debug(`${namespace}:${name}`);\n      }\n      return (...args) => debugInstances[`${namespace}:${name}`](...args);\n    },\n  });\n  const globalName = typeof addToGlobals === 'string' ? addToGlobals : 'logger';\n  if (addToGlobals) {\n    if (typeof window !== 'undefined') {\n      window[globalName] = logger;\n    } else if (typeof global !== 'undefined') {\n      global[globalName] = logger;\n    } else {\n      console.warn('Could not find neither window nor global object to add logger to');\n    }\n  }\n  return logger;\n};\n\nexport default createLogger;","import _ from 'lodash';\nimport createLogger from './logger';\n\nconst logger = createLogger('debug-composer');\n\nconst debugTools = {\n  /**\n   * Gets debug settings from localStorage\n   * @returns {string} debug settings\n   */\n  getFromLocalStorage() {\n    if (typeof localStorage !== 'undefined') {\n      return localStorage.getItem('debug');\n    }\n    return '';\n  },\n\n  /**\n   * Sets debug settings to localStorage\n   * @param value\n   */\n  setToLocalStorage(value) {\n    if (typeof localStorage !== 'undefined') {\n      localStorage.setItem('debug', value);\n    }\n  },\n\n  /**\n   * Clear debug options in localStorage\n   */\n  clearLocalStorage() {\n    if (typeof localStorage !== 'undefined') {\n      localStorage.removeItem('debug');\n    }\n  },\n\n  /**\n   * Sets provided settings as string to localStorage\n   * @param {object} settings - debug settings as js object\n   * @param {string|number} enable - debug settings level to enable (the same as index in settings object to be set)\n   */\n  configureDebugger(settings, enable = 'default') {\n    if (!typeof settings === 'object') {\n      throw new Error(`Expected an object provided as the first argument to configureDebugger function. ${typeof settings} found instead.`);\n    }\n    if (!settings[enable]) {\n      throw new Error(`Key ${enable} not found in settings file provided to configureDebugger method. As a second argument you must provide index from settings object`);\n    }\n    if (!typeof settings[enable] === 'object') {\n      throw new Error(`Expected settings.${enable} to be an object. ${typeof setting[enable]} found instead`);\n    }\n    if (typeof window === 'undefined' || typeof localStorage === 'undefined') {\n      logger.warning('It seems that you are using configureDebugger method in node.js or in outdated browser. It will not work as it needs browser environment with localStorage available.');\n    }\n\n    logger.info(`Setting debug for ${enable}`);\n\n    let options = debugTools.getDebugOptionsObject(debugTools.getFromLocalStorage());\n    _.forEach(settings[enable], (level, namespace) => {\n      options = debugTools.changeDebugOption(level)(options, namespace);\n    });\n    debugTools.setToLocalStorage(debugTools.getDebugOptionsString(options));\n  },\n\n  /**\n   * Converts debugString (as saved in localStorage) to object\n   * @param {object} debugString - debug settings string\n   * @return {object} debug setting object\n   */\n  getDebugOptionsObject(debugString) {\n    if (!debugString) {\n      return {};\n    }\n    let options = debugString;\n    options = _.map(options.split(','), el => el.split(';'));\n    options = _.flatten(options);\n    options = _.reduce(options, (accu, val) => {\n      const enabled = val.indexOf('-') !== 0;\n      const split = val.replace(/^-/, '').split(':');\n      if (!accu[split[0]]) {\n        accu[split[0]] = {};\n      }\n      if (split.length === 2) {\n        accu[split[0]][split[1]] = enabled;\n      } else {\n        accu[split[0]]._default = enabled;\n      }\n      return accu;\n    }, {});\n    return options;\n  },\n\n  /**\n   * Converts debugOptions object to string that can be saved to localStorage\n   * @param {object} optionsObject - debug options as object\n   * @return {string} optionsString - debug options as string\n   */\n  getDebugOptionsString(optionsObject) {\n    let options = optionsObject;\n    options = _.reduce(options, (accu, namespaceOptions, namespaceName) => {\n      _.forEach(namespaceOptions, (namespaceOption, subNamespaceName) => {\n        if (subNamespaceName === '_default') {\n          accu.push(`${namespaceOption ? '' : '-'}${namespaceName}`);\n        } else {\n          accu.push(`${namespaceOption ? '' : '-'}${namespaceName}:${subNamespaceName}`);\n        }\n      });\n      return accu;\n    }, []);\n    return options.join(',');\n  },\n\n  /**\n   * Returns the function that enable or disable (based on enable parameter) given namespace in optionsObject and returns that object\n   * @param {boolean} enable flag that indicates if returned function should enable or disable namespaces\n   * @return {function} function to be used for disabling/enabling namespaces\n   */\n  changeDebugOption(enable) {\n\n    /**\n     * Function to be used for disabling/enabling namespaces\n     * @param {object} optionsObject - debug options to be edited (as JS object)\n     * @param {string} namespace - namespace to be enabled/disabled (e.g. 'socket.io-client' or 'mi18n-redux:info')\n     * @param {number} level - if set to 0 and provided with outer namespace (like 'debug' and not 'debug:warning') the namespace with asterisk (e.g. 'debug:*') will be added as well\n     * @return {object} new optionsObject - modified debug options as js object\n     */\n    return (optionsObject, namespace, level = 0) => {\n      const splitNamespace = namespace.split(':');\n      let newOptions = {\n        ...optionsObject,\n      };\n\n      if (splitNamespace.length === 1) {\n        // console.log('length=1', splitNamespace, enable, newOptions);\n        if (namespace === '*') {\n          if (enable) {\n            newOptions = {\n              ...newOptions,\n              '*': { _default: true },\n            };\n            // console.log('length=1 *', splitNamespace, enable, newOptions);\n          } else {\n            delete newOptions['*'];\n          }\n        } else if (level === 0) {\n          newOptions = {\n            ...newOptions,\n            [splitNamespace[0]]: { _default: enable, '*': enable },\n          };\n        } else {\n          newOptions = {\n            ...newOptions,\n            [splitNamespace[0]]: {\n              ...newOptions[splitNamespace[0]],\n              _default: enable,\n            },\n          };\n        }\n      } else {\n        // console.log('length!=1', newOptions[splitNamespace[0]]);\n        newOptions = {\n          ...newOptions,\n          [splitNamespace[0]]: {\n            ...newOptions[splitNamespace[0]],\n            [splitNamespace[1]]: enable,\n          }\n        };\n        // console.log('length!=1', splitNamespace, enable, newOptions);\n      }\n      return newOptions;\n    };\n  },\n\n  /**\n   * Enables given namespace (with saving to localStorage)\n   * @param {string} namespace - namespace to be enabled\n   * @param {number} level - if set to 0 and provided with outer namespace (like 'debug' and not 'debug:warning') the namespace with asterisk (e.g. 'debug:*') will be added as well\n   * @return {void}\n   */\n  enableDebug(namespace = '*', level = 0) {\n    const debugOptions = debugTools.getDebugOptionsObject(debugTools.getFromLocalStorage());\n    const modifiedDebugOptions = debugTools.changeDebugOption(true)(debugOptions, namespace, level);\n    debugTools.setToLocalStorage(debugTools.getDebugOptionsString(modifiedDebugOptions));\n  },\n\n  /**\n   * Disables given namespace (with saving to localStorage)\n   * @param {string} namespace - namespace to be disabled\n   * @param {number} level - if set to 0 and provided with outer namespace (like 'debug' and not 'debug:warning') the namespace with asterisk (e.g. 'debug:*') will be added as well\n   * @return {void}\n   */\n  disableDebug(namespace = '*', level = 0) {\n    const debugOptions = debugTools.getDebugOptionsObject(debugTools.getFromLocalStorage());\n    const modifiedDebugOptions = debugTools.changeDebugOption(false)(debugOptions, namespace, level);\n    debugTools.setToLocalStorage(debugTools.getDebugOptionsString(modifiedDebugOptions));\n  },\n\n  /**\n   * Returns current debug options from localStorage\n   * @return {object} debug options as JS object\n   */\n  getDebugOptions() {\n    return this.getDebugOptionsObject(localStorage.getItem('debug'));\n  }\n};\n\nexport default debugTools;\n","import debugTools from './debugTools';\nimport createLogger from './logger';\n\nexport const configureDebugger = debugTools.configureDebugger;\nexport const resetDebugger = debugTools.clearLocalStorage;\nexport default createLogger;\n"],"names":["createLogger","namespace","addToGlobals","debugInstances","logger","Proxy","target","name","debug","globalName","window","global","warn","debugTools","localStorage","getItem","value","setItem","removeItem","settings","enable","Error","setting","warning","info","options","getDebugOptionsObject","getFromLocalStorage","forEach","level","changeDebugOption","setToLocalStorage","getDebugOptionsString","debugString","_","map","split","el","flatten","reduce","accu","val","enabled","indexOf","replace","length","_default","optionsObject","namespaceOptions","namespaceName","namespaceOption","subNamespaceName","push","join","splitNamespace","newOptions","debugOptions","modifiedDebugOptions","configureDebugger","resetDebugger","clearLocalStorage"],"mappings":"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"}